/*!
  \page urg_sensor_spec_page URG C ライブラリ実装詳細

  URG センサから距離データを取得するためのライブラリを実装する。

  - 複数の URG センサに対しても適切に通信できるようにする。
  - スレッド環境で動作できるように、ライブラリ関数はリエントラントにする。


  \section urg_sensor_spec_open 接続の処理

  センサがエラー状態でないときは、接続できるようにする。

  - 最初に "QT" を送信する
    - SCIP 1.0 のときは "E" が返される
    - タイムスタンプ合わせモードのときは "0E" が返される
    - 通常状態では "00" が返される
    - 計測中のときは、距離データの文字列が返される
      - 返される距離データは、読み捨てればよい

  - "SS" を送信し、指定された通信速度に設定する
  - "PP" を送信し、パラメータを取得する

  \dot
  digraph open_flow {
    start -> QT
    QT -> SCIP20 [label = " \"E\" が返されたとき ", fontsize=11];
    QT -> SS [label = " \"00\" が返されたとき ", fontsize=11];
    QT -> TM2_1st [label = " \"0E\" が返されたとき ", fontsize=11];
    QT -> ChangeBaudrate [label = " 応答がないとき:\n 通信できなかったとみなす ", fontsize=11];
    QT -> SS [label = "応答が異常なとき:\n 距離データとみなし、読み捨てる ", fontsize=11];
    TM2_1st -> SS
    SCIP20 -> SS
    SS -> PP
    PP -> end

    TM2_1st [label = "TM2"];
    ChangeBaudrate [label = " 通信速度を変更して\n start から処理を行う ", fontsize=11];
  }
  \enddot
  \n

  - 115200, 9600, 38400 の順に PC のボーレートを設定し、センサへの通信を行う
    - センサのボーレートと同じでなかった場合は、次のボーレートに変更して通信を行う
    - どのボーレートでも通信できなかった場合は、接続を放棄する
  - イーサネット接続のときは、通信速度の変更は行わなくてよい


  \section urg_sensor_spec_close 切断の処理

  なるべく通常の状態にしてからセンサとの接続を切断する。\n
  現在の状態がどうなっているかは、ライブラリ内で管理しておき、必要に応じてコマンドを送信する。

  - レーザが発光しているときや計測中のときは、"QT" を送信する
  - タイムスタンプ合わせモードのときは "TM2" を送信する

  \section urg_sensor_spec_distance データの取得

  \subsection urg_sensor_spec_distance_gd GD(GS) コマンドの場合

  - レーザが消灯状態のときは発光させる
  - 計測が終了してもレーザの消灯は行わない

  - 受信関数は、全てのデータ受信で共通に扱う
    - エコーバックで、GD, MD, ID, HD のどのコマンドかを判定して処理する
    \n \n
    - MD 系の残り回数が 00 のときは、残りスキャン回数が無限回のときと、１回のときの２種類がある
      - 最初のエコーバックを受信したときに、最初の指定回数が 00 だったかを保持しておくことで、残りスキャン回数が無限回か１回かを判断する
    \n \n
    - 受信処理は改行までのデータを読みだし、それを解析しながらデータを格納する
      - １スキャン全体を格納するような大きなバッファは用意しない


  \subsection urg_sensor_spec_distance_md MD(MS), ME, ID, HD コマンドの場合

  - GD で用意した関数で受信処理を行う


  \section urg_sensor_spec_distance_index 角度とインデックスとの対応について

  - 最後に取得した設定において、角度とインデックスの変換関数を作る
    - 最後にデータを取得したときの設定を urg_t 内に保持しておく
*/
